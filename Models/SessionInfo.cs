using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace NextExplorer.Models
{
    public class SessionInfo
    {
        [Required]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        [Required]
        [MaxLength(100)]
        public string Name { get; set; } = string.Empty;

        [MaxLength(500)]
        public string? Description { get; set; }

        [Required]
        public List<FolderInfo> Folders { get; set; } = new();

        public DateTime CreatedAt { get; set; }

        public DateTime UpdatedAt { get; set; }

        public DateTime? LastUsed { get; set; }

        public int UsageCount { get; set; }

        public List<string> Tags { get; set; } = new();

        public bool IsFavorite { get; set; }

        public bool IsAutoGenerated { get; set; }

        public int FolderCount => Folders?.Count ?? 0;

        public string LastUsedText => LastUsed?.ToString("yyyy/MM/dd HH:mm") ?? "Êú™‰ΩøÁî®";

        public string FavoriteIcon => IsFavorite ? "‚≠ê" : "üìÇ";

        public SessionInfo()
        {
            CreatedAt = DateTime.Now;
            UpdatedAt = DateTime.Now;
        }

        public SessionInfo(string name) : this()
        {
            Name = name;
        }

        public SessionInfo(string name, IEnumerable<FolderInfo> folders) : this(name)
        {
            Folders = folders.ToList();
        }

        public void AddFolder(FolderInfo folder)
        {
            if (folder == null) return;
            
            if (!Folders.Contains(folder))
            {
                Folders.Add(folder);
                UpdatedAt = DateTime.Now;
            }
        }

        public void RemoveFolder(FolderInfo folder)
        {
            if (Folders.Remove(folder))
            {
                UpdatedAt = DateTime.Now;
            }
        }

        public void RemoveFolderByPath(string path)
        {
            var folder = Folders.FirstOrDefault(f => 
                string.Equals(f.Path, path, StringComparison.OrdinalIgnoreCase));
            if (folder != null)
            {
                RemoveFolder(folder);
            }
        }

        public void UpdateUsage()
        {
            UsageCount++;
            LastUsed = DateTime.Now;
            UpdatedAt = DateTime.Now;
        }

        public void AddTag(string tag)
        {
            if (!string.IsNullOrWhiteSpace(tag) && !Tags.Contains(tag, StringComparer.OrdinalIgnoreCase))
            {
                Tags.Add(tag);
                UpdatedAt = DateTime.Now;
            }
        }

        public void RemoveTag(string tag)
        {
            if (Tags.RemoveAll(t => string.Equals(t, tag, StringComparison.OrdinalIgnoreCase)) > 0)
            {
                UpdatedAt = DateTime.Now;
            }
        }

        public void UpdateFolderStatuses()
        {
            foreach (var folder in Folders)
            {
                folder.UpdateStatus();
            }
            UpdatedAt = DateTime.Now;
        }

        public List<FolderInfo> GetInaccessibleFolders()
        {
            return Folders.Where(f => !f.Exists || !f.IsAccessible).ToList();
        }

        public List<FolderInfo> GetAccessibleFolders()
        {
            return Folders.Where(f => f.Exists && f.IsAccessible).ToList();
        }

        public SessionInfo Clone()
        {
            return new SessionInfo
            {
                Id = Guid.NewGuid().ToString(),
                Name = $"{Name} - „Ç≥„Éî„Éº",
                Description = Description,
                Folders = Folders.ToList(),
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,
                Tags = Tags.ToList(),
                IsFavorite = false,
                IsAutoGenerated = IsAutoGenerated
            };
        }

        public override string ToString()
        {
            return $"{Name} ({FolderCount}ÂÄã„ÅÆ„Éï„Ç©„É´„ÉÄ)";
        }

        public override bool Equals(object? obj)
        {
            if (obj is SessionInfo other)
            {
                return string.Equals(Id, other.Id, StringComparison.Ordinal);
            }
            return false;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}